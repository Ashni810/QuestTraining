 List is a generic collection class that is part of the .NET Framework. 
 It is a resizable array, which means it can grow or shrink dynamically as elements are added or removed.

Here are some key characteristics of Lists 

Ordered: Lists maintain the order in which elements were inserted.
Indexable: Lists can be indexed, meaning you can access specific elements using their index (position) in the list.
Mutable: Lists can be modified after they are created.
Type-safe: Lists are strongly typed, meaning you can specify the type of elements that can be stored in the list.

Lists are commonly used in C# for a variety of purposes, such as:

Storing a collection of objects
Implementing a dynamic array
Creating a cache or buffer
Managing a list of items in a user interface

-- example of how to create and use a List in C#:--

using System.Collections.Generic;

// Create a list of integers
List<int> myList = new List<int>();

//Add some elements to the list
myList.Add(1);
myList.Add(2);
myList.Add(3);

// Access an element in the list
int firstElement = myList[0]; // returns 1

// Remove an element from the list
myList.Remove(2);

// Iterate over the elements in the list
foreach (int element in myList)
{
    Console.WriteLine(element);
}

--overview of the built-in functions for the List<T> type in C#, along with examples for each--

1. Add(T item)
Adds an object to the end of the List<T>.
List<int> numbers = new List<int>();
numbers.Add(10);
numbers.Add(20);
Console.WriteLine(string.Join(", ", numbers)); // Output: 10, 20

2. AddRange(IEnumerable<T> collection)
Adds the elements of the specified collection to the end of the List<T>.
List<int> moreNumbers = new List<int> { 30, 40, 50 };
numbers.AddRange(moreNumbers);
Console.WriteLine(string.Join(", ", numbers)); // Output: 10, 20, 30, 40, 50

3. Clear()
Removes all elements from the List<T>.
numbers.Clear();
Console.WriteLine(numbers.Count); // Output: 0

4. Contains(T item)
Determines whether an element is in the List<T>.
numbers.Add(10);
Console.WriteLine(numbers.Contains(10)); // Output: True

5. CopyTo(T[] array)
Copies the entire List<T> to a compatible one-dimensional array, starting at the beginning of the target array.
int[] array = new int[numbers.Count];
numbers.CopyTo(array);
Console.WriteLine(string.Join(", ", array)); // Output: 10

6. Exists(Predicate<T> match)
Determines whether the List<T> contains elements that match the conditions defined by the specified predicate.
bool exists = numbers.Exists(n => n > 5);
Console.WriteLine(exists); // Output: True

7. Find(Predicate<T> match)
Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire List<T>.
int foundNumber = numbers.Find(n => n > 5);
Console.WriteLine(foundNumber); // Output: 10

8. FindAll(Predicate<T> match)
Retrieves all the elements that match the conditions defined by the specified predicate.
List<int> foundNumbers = numbers.FindAll(n => n > 5);
Console.WriteLine(string.Join(", ", foundNumbers)); // Output: 10

9. FindIndex(Predicate<T> match)
Searches for an element that matches the conditions defined by the specified predicate and returns the zero-based index of the first occurrence.
int index = numbers.FindIndex(n => n > 5);
Console.WriteLine(index); // Output: 0

10. ForEach(Action<T> action)
Performs the specified action on each element of the List<T>.
numbers.ForEach(n => Console.WriteLine(n)); // Output: 10

11. GetRange(int index, int count)
Creates a shallow copy of a range of elements in the source List<T>.
numbers.AddRange(new List<int> { 20, 30, 40 });
List<int> range = numbers.GetRange(1, 2);
Console.WriteLine(string.Join(", ", range)); // Output: 20, 30

12. IndexOf(T item)
Searches for the specified object and returns the zero-based index of the first occurrence within the entire List<T>.
int indexOf10 = numbers.IndexOf(10);
Console.WriteLine(indexOf10); // Output: 0

13. Insert(int index, T item)
Inserts an element into the List<T> at the specified index.
numbers.Insert(1, 15);
Console.WriteLine(string.Join(", ", numbers)); // Output: 10, 15, 20, 30, 40

14. Remove(T item)
Removes the first occurrence of a specific object from the List<T>.
numbers.Remove(15);
Console.WriteLine(string.Join(", ", numbers)); // Output: 10, 20, 30, 40

15. RemoveAt(int index)
Removes the element at the specified index of the List<T>.
numbers.RemoveAt(0);
Console.WriteLine(string.Join(", ", numbers)); // Output: 20, 30, 40

16. RemoveAll(Predicate<T> match)
Removes all the elements that match the conditions defined by the specified predicate.
numbers.RemoveAll(n => n > 20);
Console.WriteLine(string.Join



